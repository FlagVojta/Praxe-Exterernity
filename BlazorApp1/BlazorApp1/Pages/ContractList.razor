@attribute [Authorize(Roles = "Administrator")]
@page "/ContractList"
@using DataAccessLibrary.Interfaces;
@using DataAccessLibrary.Models;
@inject IContractData _dbc
@inject IUserData _dbu
@inject NavigationManager navMan
@using System.Reflection;
@*<RadzenDataGrid Data="@this.users" TItem="UserModel" AllowVirtualization="true" Style="height:700px"
                AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowSorting="false">
    <Columns>
        <RadzenDataGridColumn TItem="UserModel" Property="" Title="Název Organizace" />
        <RadzenDataGridColumn TItem="UserModel" Property="City" Title="Město" />
        <RadzenDataGridColumn TItem="UserModel" Property="Name" Title="Jméno žáka" />
        <RadzenDataGridColumn TItem="UserModel" Property="LastName" Title="Příjmení žáka" />
        <RadzenDataGridColumn TItem="UserModel" Property="LastChanged" Title="Datum Poslední úpravy" />  
    </Columns>
</RadzenDataGrid>*@
@*<table class="table table-primary">
    <tr style="gap : 20px">
        <th>Název Organizace</th>
        <th>Město</th>
        <th>Jméno žáka</th>
        <th>Příjmení žáka</th>
        <th>Datum Poslední úpravy</th>
    </tr>
    @if (contracts != null)
    {
        @foreach (var item in contracts)
        {
            <tr>
                @if (users != null && contract != null)
                {
                    <td>@item.OrgName</td>
                    <td>@item.City</td>
                    <td>@users.Where(value => value.ContractId == item.Id).Single().Name</td>
                    <td>@users.Where(value => value.ContractId == item.Id).Single().LastName</td>
                    <td>@item.LastChanged</td>
                }
            </tr>
        }
    }*@
@*</table>*@
<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">Název Firmy</th>
            <th scope="col">Město</th>
            <th scope="col">Jméno žáka</th>
            <th scope="col">Příjmení žáka</th>
            <th scope="col">Poslední změna</th>
        </tr>
    </thead>
    <tbody class="table-group-divider">
        @if (contracts != null)
        {
            @foreach (var item in contracts)
            {
                <tr>
                    @if (users != null && contract != null)
                    {
                        ContractModel model = new();
                        model = EditContract(item);
                        <td>@model.OrgName</td>
                        <td>@model.City</td>
                        <td>@users.Where(value => value.ContractId == model.Id && value.Type != "Administrator").Single().Name</td>
                        <td>@users.Where(value => value.ContractId == model.Id && value.Type != "Administrator").Single().LastName</td>
                        <td>@model.LastChanged</td>
                        <td><button class="btn btn-outline-primary" @onclick=@(args => ShowContract(model.Id))><i class="bi bi-eye"></i></button></td>
                    }
                </tr>
            }
        }
    </tbody>
</table>
@*<SfGrid DataSource="@users">
    <GridColumns>
        <GridColumn Field="@nameof(UserModel.Name)" HeaderText="Jméno"></GridColumn>
        <GridColumn Field="@nameof(UserModel.LastName)" HeaderText="Příjmení"></GridColumn>
        <GridForeignColumn Field="@nameof(UserModel.ContractId)" HeaderText="Test" ForeignDataSource="@contracts" ForeignKeyValue="OrgName"></GridForeignColumn>
    </GridColumns>   
</SfGrid>*@
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    List<ContractModel> contracts;
    IEnumerable<UserModel> users;
    ContractModel contract = new();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        contracts = await _dbc.GetContracts();
        this.users = await _dbu.GetUsers();     
    }

    private async Task ShowContract(int ContractId)
    {
        var authState = await authenticationState;
        UserModel user = users.Where(user => user.Login == authState.User.Identity.Name).Single();
        user.ContractId = ContractId;
        await _dbu.EditUser(user);
        navMan.NavigateTo("/contract", true);
    }

    private ContractModel EditContract(ContractModel contract)
    {
        Type contractType = typeof(ContractModel);
        PropertyInfo[] properties = contractType.GetProperties();

        foreach (PropertyInfo property in properties)
        {
            try
            {
                if (property.GetValue(contract).ToString() == "" || property.GetValue(contract) == null)
                {
                    property.SetValue(contract, "Neupraveno");
                }
            }
            catch (Exception)
            {

                property.SetValue(contract, "Neupraveno");
            }
            
        }
        return contract;
    }
}
