@attribute [Authorize(Roles = "Administrator")]
@page "/ContractList"
@using DataAccessLibrary.Interfaces;
@using DataAccessLibrary.Models;
@inject IContractData _dbc



<RadzenDataGrid Data="@this.contracts" TItem="ContractModel" AllowVirtualization="true" Style="height:600px"
                AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowSorting="true">
    <Columns>
        <RadzenDataGridColumn TItem="ContractModel" Property="OrgName" Title="Název Organizace" />
        <RadzenDataGridColumn TItem="ContractModel" Property="Registered" Title="Registrována" />
        <RadzenDataGridColumn TItem="ContractModel" Property="Based" Title="Sídlo" />
        <RadzenDataGridColumn TItem="ContractModel" Property="ICO" Title="IČO" />
        <RadzenDataGridColumn TItem="ContractModel" Property="RepresendedBy" Title="Zastoupená" />
        <RadzenDataGridColumn TItem="ContractModel" Property="StreetNumber" Title="Ulice a číslo"></RadzenDataGridColumn>
       
    </Columns>
</RadzenDataGrid>
@*
@code {
    IEnumerable<OrderDetail> orderDetails;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        orderDetails = dbContext.OrderDetails;
    }
}
*@




@code {
    IEnumerable<ContractModel> contracts;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        this.contracts = await _dbc.GetContracts();

    }
}
