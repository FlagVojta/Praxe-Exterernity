@attribute [Authorize(Roles = "User,Administrator")]
@page "/contract"
@inject IUserData _dbu
@inject IContractData _dbc
@inject NotificationService service
@inject NavigationManager navMan
@using DataAccessLibrary;
@using DataAccessLibrary.Models
@using DataAccessLibrary.Interfaces
@using System.Reflection;



<PageTitle>Contract</PageTitle>

<h1>Smlouva</h1>
@{
    @if (this.contract == null)
    {
        <div class="rz-m-12">
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    }
    else
    {
        <div class="rz-p-0 rz-p-md-12">
           
            <h4>Firma</h4>
            <RadzenStack>

                <RadzenFormField Text="Název Organizace">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.OrgName"></RadzenTextBox>
                </RadzenFormField>
                <RadzenFormField Text="Zapsaná">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.Registred"></RadzenTextBox>
                </RadzenFormField>
                <RadzenFormField Text="Sídlo">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.Based"></RadzenTextBox>
                </RadzenFormField>
                <RadzenFormField Text="IČO">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.ICO"></RadzenTextBox>
                </RadzenFormField>
                <RadzenFormField Text="Zastoupená">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.RepresentedBy"></RadzenTextBox>
                </RadzenFormField>
            </RadzenStack>
            <br>
            <h4>Místo výkonu Praxe</h4>
            <RadzenStack>                  
                <RadzenFormField Text="Ulice a číslo">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.StreetANumber"></RadzenTextBox>
                </RadzenFormField>
                <RadzenFormField Text="Město">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.City"></RadzenTextBox>
                </RadzenFormField>
                <RadzenFormField Text="PSČ">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.PSC"></RadzenTextBox>
                </RadzenFormField>
            </RadzenStack>
            <br>
            <h4>Pověřená Osoba</h4>
            <RadzenStack>                     
                <RadzenFormField Text="Jméno">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.FirstName"></RadzenTextBox>
                </RadzenFormField>
                <RadzenFormField Text="Příjmení">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.LastName"></RadzenTextBox>
                </RadzenFormField>
                <RadzenFormField Text="Telefon">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.MobileNumber"></RadzenTextBox>
                </RadzenFormField>
            </RadzenStack>
            <br>
            <h4>Druh činností, které bude žák vykonávat</h4>
            <RadzenStack>
                <RadzenFormField Text="Popis práce" Variant="@variant">
                    <RadzenTextArea Disabled=@disabled @bind-Value="@this.contract.WorkDescription" />
                </RadzenFormField>
            </RadzenStack>
            <br>
            <h4>Časový rozvrh</h4>
            <h5>Pracovní doba</h5>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" Class="rz-p-4 rz-mb-6 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);">
                <RadzenFormField Text="Od">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.WorkStart"></RadzenTextBox>
                </RadzenFormField>
                <RadzenFormField Text="Do">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.WorkEnd"></RadzenTextBox>
                </RadzenFormField>
            </RadzenStack> 
            <h5>Přestávka</h5>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" Class="rz-p-4 rz-mb-6 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);">
                <RadzenFormField Text="Od">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.BreakStart"></RadzenTextBox>
                </RadzenFormField>
                <RadzenFormField Text="Do">
                    <RadzenTextBox Disabled=@disabled @bind-Value="@this.contract.BreakEnd"></RadzenTextBox>
                </RadzenFormField>
            </RadzenStack>  
            <br>
            <RadzenButton Click=@Save Text="Save" ButtonStyle="ButtonStyle.Primary" />
        </div>
        <RadzenNotification></RadzenNotification>
    }        
}



@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private List<UserModel> users = new();
    private UserModel user = new();
    private ContractModel contract = new();
    private List<PropertyInfo> properties = new();
    private bool disabled;
    Variant variant = Variant.Outlined;

    protected override async Task OnInitializedAsync()
    {

        base.OnInitialized();

        var authState = await authenticationState;

        if (authState.User.IsInRole("Administrator"))
        {
            disabled = true;
        }

        this.user = await _dbu.GetUser(authState.User.Identity.Name);


        this.contract = await _dbc.GetUserContract(user.ContractId);


    }

    private async Task Save()
    {
        FormatValidation validation = new();

        try
        {
            validation.Validate(this.contract.WorkStart);
            validation.Validate(this.contract.WorkEnd);
            validation.Validate(this.contract.BreakStart);
            validation.Validate(this.contract.BreakEnd);
        }
        catch (Exception)
        {
            NotificationMessage errorMessage = new NotificationMessage 
            {
                Severity = NotificationSeverity.Error, 
                Summary = "Error", 
                Detail = "Incorrect Date Format HH:mm", 
                Duration = 4000 
            };
            service.Notify(errorMessage);
            return;
        }
        this.contract.LastChanged = DateTime.Now;
        await _dbc.EditContract(this.contract);
        NotificationMessage goodMessage = new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = "Approved",
            Detail = "Saved",
            Duration = 4000
        };
        service.Notify(goodMessage);


    }

}
