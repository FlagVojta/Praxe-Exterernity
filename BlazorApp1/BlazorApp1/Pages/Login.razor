@layout LoginLayout
@page "/"
@using BlazorApp1.Authentication;
@using DataAccessLibrary.Interfaces;
@using DataAccessLibrary.Models;
@inject NotificationService service
@inject IJSRuntime js;
@inject IUserData _db;
@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager navManager;

@*<body>

    <h1 class="text-center">Login</h1>

    <input @bind=model.Login type="text"placeholder="Username">
      <br>
    <input @bind=model.Password type="password" placeholder="Password">
    <button @onclick="Authenticate" class="btn btn-primary">Login</button>
    

</body>
*@
<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
    <RadzenStack Gap="2rem">
    <RadzenFormField Text="Username">
        <RadzenTextBox @bind-Value="@model.Login" />
    </RadzenFormField>
    <RadzenFormField Text="Password">
        <RadzenPassword  @bind-Value="@model.Password" />
    </RadzenFormField>
        <RadzenButton Click=@(args => Authenticate(new NotificationMessage { Style = "position: absolute; left: -1000px;", Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = "Success Detail", Duration = 40000 })) Text="Login" ButtonStyle="ButtonStyle.Primary" />
    </RadzenStack>
</RadzenCard>


@*
<RadzenLogin AllowRegister=false Login="@Authenticate"></RadzenLogin>*@

@code {
    private class Model
    {
        public string Login{ get; set; }
        public string Password { get; set; }

    }
    List<UserModel> users = new();
    //UserModel user = new();
    private Model model = new();

    private async Task Authenticate(NotificationMessage message)
    {
        users = await _db.GetUsers();

        UserModel? user = users.FirstOrDefault(item => item.Login == model.Login);

        if (user == null || user.Password != model.Password)
        {
            service.Notify(message);
            return;
        }

        var customAuthProvider = (CustomAuthentication)authStateProvider;
        
        await customAuthProvider.UpdateAuthenticationState(new UserSession
        {
            Login = user.Login,
            Role = user.Type,
            
        });
        navManager.NavigateTo("/greetings", true);

    }



    
}
