@using BlazorApp1.Authentication;
@using EntityFrameWorkDataAccess;
@using EntityFrameWorkDataAccess.Models;
@using EntityFrameworkLibrary.Models;
@inject DatabaseService dbService
@inject NavigationManager navMan
@inject AuthenticationStateProvider authStateProvider

@*<nav class="navbar bg-dark navbar-expand-lg bg-body-tertiary" data-bs-theme="dark">
    <div class="container-fluid">
        <a class="navbar-brand">Praxátor</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <AuthorizeView Roles="User">
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
            <div class="navbar-nav m-lg-auto">
                <a class="nav-link active" aria-current="page" href="@ContractUrl" @onclick=@NavigateToContract>Smlouva</a>
                <a class="nav-link active" href="/greetings">Přihláška na praxi</a>
                <a class="nav-link active" href="/">Záznam o praxi</a>
                <a class="nav-link active" @onclick=Logout href="/">Logout</a>
                
            </div>
        </div>
        </AuthorizeView>
    </div>
</nav>
*@

<nav class="navbar bg-dark navbar-expand-lg bg-body-tertiary" data-bs-theme="dark">
    <div class="container-fluid">
        <a class="navbar-brand">Praxátor</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <AuthorizeView Roles="User">
            <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
                <div class="navbar-nav">
                    <a class="nav-link active" aria-current="page" href="@ContractUrl">Smlouva</a>
                    <a class="nav-link active" href="@ApplicationUrl">Přihláška na praxi</a>
                    <a class="nav-link active" href="/Record">Záznam o praxi</a>
                    <a class="nav-link active" @onclick=Logout href="/">Logout</a>

                </div>
            </div>
        </AuthorizeView>
        <AuthorizeView Roles="Administrator">
            <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
                <div class="navbar-nav">
                    <a class="nav-link active" @onclick=Logout href="/">Logout</a>
                </div>
            </div>
        </AuthorizeView>
    </div>
</nav>

@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private string ContractUrl;
    private string ApplicationUrl;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();

        var authState = await authenticationState;
        NavigateToContract(authState);
        NavigateToApplicationForm(authState);

    }
    public void NavigateToContract(AuthenticationState authState)
    {

        tbContract contract = dbService.GetContracts().FirstOrDefault(item => item.tbUser.Login == authState.User.Identity.Name);
        //navMan.NavigateTo($"/contract/{contract.Id}");
        if (contract == null)
        {
            return;
        }
        ContractUrl = $"/contract/{contract.Id}"!;
    }

    public void NavigateToApplicationForm(AuthenticationState authState)
    {
        Application applicationForm = dbService.GetApplications().FirstOrDefault(item => item.tbUser.Login == authState.User.Identity.Name);
        //navMan.NavigateTo($"/contract/{contract.Id}");
        if (applicationForm == null)
        {
            return;
        }
        ApplicationUrl = $"/ApplicationForm/{applicationForm.Id}";

        
    }

    public async Task Logout()
    {
        var AuthProvider = (CustomAuthentication)authStateProvider;
        await AuthProvider.UpdateAuthenticationState(null);
        navMan.NavigateTo("/", true);
    }
}