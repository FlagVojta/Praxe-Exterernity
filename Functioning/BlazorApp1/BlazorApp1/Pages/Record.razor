@page "/Record/{RecordId:int}"
@using BlazorApp1.Authentication;
@using EntityFrameWorkDataAccess;
@using EntityFrameworkLibrary.Models;
@inject DatabaseService dbService
@inject CustomAuthentication customauth
@layout MainLayout
<div style="height:100vh">
    <h1>Záznam o praxi</h1>
    <div class="big-container-record">        
        @foreach (var item in workRecord.workDays)
        {
            
            <div class="record-row" style="text-align-last">
            <h3>@DateTimeConvert(item.Date)</h3>
            <RadzenNumeric Min="0" Max="24" @bind-Value=@item.WorkTime />
            <RadzenTextBox @bind-Value="@item.WorkDescription" />
            </div>
        }
        <div class="flex-box-end">
            <RadzenButton Disabled="@disabled" Click=@Save Text="Save" ButtonStyle="ButtonStyle.Info" />
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    [Parameter]
    public int RecordId{ get; set; }
    public WorkRecord workRecord{ get; set; }
    public bool disabled;
    public bool authenticated;
    Variant variant = Variant.Outlined;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        workRecord = dbService.GetRecord(RecordId);
        workRecord.workDays.Sort((obj1, obj2) => obj1.Date.CompareTo(obj2.Date));
        this.authenticated = customauth.AuthenticateUser(workRecord, authState);
    }
    public string DateTimeConvert(DateTime time)
    {
        return time.ToString("ddd d.M");
    }
    public void Save()
    {
        try
        {
            dbService.EditRecord(workRecord);
            foreach (var item in workRecord.workDays)
            {
                dbService.EditDay(item);
            }
        }
        catch (Exception)
        {           
            throw;
        }      
    }
}
