@layout MainLayout
@attribute [Authorize(Roles = "Administrator")]
@page "/ContractList"
@using DataAccessLibrary.Interfaces;
@using DataAccessLibrary.Models;
@using System.Reflection;
@using EntityFrameWorkDataAccess.Models;
@using EntityFrameWorkDataAccess;
@inject DatabaseService dbService
@inject IContractData _dbc
@inject IUserData _dbu
@inject NavigationManager navMan

<h1>Seznam smluv</h1>
<div class="data-grid-div">
    <RadzenDataGrid class="custom-data-grid" Context="item" Data="@this.contracts" TItem="tbContract" AllowVirtualization="true" Style="height:700px"
                    AllowFiltering="false" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                    AllowSorting="false">
        <Columns>
            <RadzenDataGridColumn TItem="tbContract" Property="OrgName" Title="Název Organizace" />
            <RadzenDataGridColumn TItem="tbContract" Property="City" Title="Město" />
            <RadzenDataGridColumn Width="200px" TItem="tbContract" Property="item.tbUser.Name" Title="Jméno žáka" />
            <RadzenDataGridColumn Width="200px" TItem="tbContract" Property="item.tbUser.LastName" Title="Příjmení žáka" CssClass="styled-row-column" HeaderCssClass="styled-row-column-heading" />
            <RadzenDataGridColumn Width="200px" TItem="tbContract" Property="LastChanged" Title="Datum Poslední úpravy" />
            <RadzenDataGridColumn TItem="tbContract" Context="item" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                <Template Context="item">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => Edit(item.Id))">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    List<tbContract> contracts;
    ContractModel contract = new();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        contracts = dbService.GetContracts();

    }
    private async Task Edit(int ContractId)
    {
        var authState = await authenticationState;
        navMan.NavigateTo($"/contract/{ContractId}", true);
    }
    private ContractModel EditContract(ContractModel contract)
    {
        Type contractType = typeof(ContractModel);
        PropertyInfo[] properties = contractType.GetProperties();

        foreach (PropertyInfo property in properties)
        {     
            if (property.GetValue(contract)! == "" || property.GetValue(contract) == null)
            {
                property.SetValue(contract, "Neupraveno");
            }          
        }
        return contract;
    }
}
